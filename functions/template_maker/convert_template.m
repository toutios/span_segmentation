function model = convert_template(matfilename,trackingfilename,frameNumber,frameWidth,mriScale,plotOn);
%model = spanGenerateTrackingTemplate('isc04142006_eb_template.mat','isc04142006_01_12_38.trk',144,68,133,1);
%
%This function extracts the model template contours from a .trk file,
%which was generated by the SPAN MRI Tracker.
%
%The model contours are stored in the data structure
%"model.segment", which also contains the remaining parameters for the model
%based SPAN MRI contour tracker.
%
%The FOV of the template frame is normalized to [-.5 .5], i.e. the width
%and height are 1. That means that all coordinates are within [-.5 .5].
%
%The "model.segment" data structure is stored in a .mat-file.
%
%The .trk-file must have one particular hand-tracked frame with the
%following contours initilized: 
% 1 epiglottis
% 2 tongue
% 3 jaw bone
% 4 lower lip
% 5 chin
% 6 trachea front
% 7 pharyngeal wall
% 8 FOV top border
% 9 FOV back border
% 10 FOV bottom border
% 11 hard palate
% 12 velum
% 13 nasal cavity
% 14 nose
% 15 upper lip
%
% Ex:
%
% model = spanGenerateTrackingTemplate('isc04142006_eb_template.mat','isc04142006_01_12_38.trk',144,68,133);
%
% Erik Bresch, USC SPAN Group 2007

model = [];

% if ~exist(trackingfilename,'file')
%     disp(['The tracking file ' trackingfilename ' does not exist. Exiting spanGenerateTrackingTemplate...']);
%     return
% end
% 
% if exist(matfilename,'file')
%     disp(['The mat file ' matfilename ' exists already. Exiting spanGenerateTrackingTemplate...']);
%     return
% end

fid=fopen(trackingfilename);
readdata=[];
i = 1;
current_frame_number=-inf;
new_frame_number=-inf;
current_contour_number=-inf;
new_contour_number=-inf;
while(1)
    readline= fgetl(fid);
    if readline==-1
        break
    else
        s = readline;
        if strfind(s,'im')
            new_frame_number = sscanf(strtrim(s),'im%d');
        elseif  strfind(s,'c')
            new_contour_number =  sscanf(strtrim(s),'c%d');
            if (current_contour_number ~= new_contour_number) | (current_frame_number ~= new_frame_number)
            
                current_contour_number = new_contour_number;
                current_frame_number = new_frame_number;
                
                if current_frame_number == frameNumber
                    contour{current_contour_number}.trackingposition=[];
                end
            end
        elseif isempty(s)
        else
            if current_frame_number == frameNumber
                [xpos,ypos] = strread(s,'%f%f','delimiter',',');
                contour{current_contour_number}.trackingposition = [contour{current_contour_number}.trackingposition ; xpos ypos];
            end
        end
    end
end
fclose(fid);

% the parameters for each contour:
% [ translationGradientWeight 
%   rotationGradientWeight
%   scalingGradientWeight
%   remainderGradientWeight
%   lineSegmentLength in mm
% ]

p1 = [...
    1 10  0 1  10;...5;... %epiglottis: 10 for normal subject
    1 1   1 1  20;...3;... %tongue: 20 for normal subject
    1 1   0 1  5;...3;... %jaw bone
    1 1   0 1  10;...3;... %lower lip; changed for experiment 02/2009 used to be  1 1 0 0 2 %% 1 1  0 0  2;
    1 1   0 1  15;...10;... %chin
    1 1   0 0  10;...10;... %neck front %was 20, EB 02/05/08
    ]; 
v1=[];
i1=[];
for c=1:6
    v1 = [v1 ; contour{c}.trackingposition];
    i1 = [i1 ; c*ones(size(contour{c}.trackingposition,1),1)];
end
v1 = v1/frameWidth;% - .5;
v1(:,2) =  v1(:,2);% + 1; 

p2 = [...
      1 0 1 1   20;...5;... %pharyngeal wall %was 10, EB 02/05/08
      0 0 0 1   15;...10;... %border w/ brain
      0 0 0 0   20;...20;... %neck back %%50
      0 0 0 0   5;...20;... %border w/ lungs
    ];
v2=[];
i2=[];
for c=7:10
    v2 = [v2 ; contour{c}.trackingposition];
    i2 = [i2 ; (c-6)*ones(size(contour{c}.trackingposition,1),1)];
end
v2 = v2/frameWidth;% - .5;
v2(:,2) =  v2(:,2);% + 1; 

p3 = [...
      0  0  0 0  10;...%5;... %hard palate
      1  10 0 1  15;...5;... %velum used to be '0 50 0 0 5'
      0  0  0 1  15;...5;... %border in nasal cavity upper lip; changed from 40 to 20 on 01/06/2009 EB %% 1 1 0 0 20
      0  0  0 0  10;...5;... %nose     %% 1 1 0 0 20
      0  1  0 1  10;...3;... %upper lip 1  1 0 0  2;
    ]; 
v3=[];
i3=[];
for c=11:15
    v3 = [v3 ; contour{c}.trackingposition];
    i3 = [i3 ; (c-10)*ones(size(contour{c}.trackingposition,1),1)];
end
v3 = v3/frameWidth;% - .5;
v3(:,2) =  v3(:,2);% + 1; 

%assemble the "segment" data structure
model.segment{1}.v = v1;
model.segment{2}.v = v2;
model.segment{3}.v = v3;
model.segment{1}.i = i1;
model.segment{2}.i = i2;
model.segment{3}.i = i3;
model.segment{1}.p = p1;
model.segment{2}.p = p2;
model.segment{3}.p = p3;
model.segment{1}.mu = 1;
model.segment{2}.mu = 1;
model.segment{3}.mu = 1;
%background:
model.segment{4}.v = [ .5  .5;...
                 .5 -.5;...
                -.5 -.5;...
                -.5  .5];
model.segment{4}.i = [1 1 1 1]';          
model.segment{4}.p = [0 0 0 0 -1];
model.segment{4}.mu = 0;

%plot
if plotOn
    figure(1);clf;
    subplot(121);
    colormap(gray);
    bw = zeros(256,256);
    for s=1:size(model.segment,2)
        v          = (model.segment{s}.v+.5)*256;
        bw = bw + model.segment{s}.mu*poly2mask(v(:,1),v(:,2),256,256);
    end
    image((-128:1:127)/256,(-128:1:127)/256,flipud(bw)*200); hold on;
    colors = ['r' 'g' 'b' 'y' 'c' 'm' 'k'];
    for s=1:size(model.segment,2)
        sectionsId = model.segment{s}.i;
        v          = model.segment{s}.v;
        for sId=1:max(sectionsId)
            plot( v(sectionsId==sId,1),-v(sectionsId==sId,2),[colors(sId) 'x-'],'LineWidth',2); hold on;
        end
    end
    %legend('r1', 'g2', 'b3', 'y4', 'c5', 'm6',3);
    title('initial data points');
    disp(sprintf('Total number of points before re-sampling: %d',length(model.segment{1}.v)+length(model.segment{2}.v)+length(model.segment{3}.v)));
end

%resample the contours
for s=1:(size(model.segment,2)-1)
    sectionsId         = model.segment{s}.i;
    sectionsParameters = model.segment{s}.p;
    v                  = model.segment{s}.v;
    iConcat = [];
    vConcat = [];
    for sId=1:max(sectionsId)
        vSection = v(sectionsId==sId,:);
        ndesired     = sectionsParameters(sId,5);
        vnew = InterpolateContourPoints2D(vSection,ndesired)
        vConcat = [vConcat ; vnew];
        iConcat = [iConcat ; sId * ones(size(vnew,1),1)];
    end
    model.segment{s}.v = vConcat;
    model.segment{s}.i = iConcat;
end

if plotOn
    subplot(122);
    colormap(gray);
    bw = zeros(256,256);
    for s=1:size(model.segment,2)
        v          = (model.segment{s}.v+.5)*256;
        bw = bw + model.segment{s}.mu*poly2mask(v(:,1),v(:,2),256,256);
    end
    image((-128:1:127)/256,(-128:1:127)/256,flipud(bw)*200); hold on;
    colors = ['r' 'g' 'b' 'y' 'c' 'm' 'k'];
    for s=1:size(model.segment,2)
        sectionsId = model.segment{s}.i;
        v          = model.segment{s}.v;
        for sId=1:max(sectionsId)
            plot( v(sectionsId==sId,1),-v(sectionsId==sId,2),[colors(sId) 'x-'],'LineWidth',2); hold on;
        end
    end
    %legend('r1', 'g2', 'b3', 'y4', 'c5', 'm6',3);
    title('resampled data points');
    disp(sprintf('Total number of points after re-sampling : %d',length(model.segment{1}.v)+length(model.segment{2}.v)+length(model.segment{3}.v)));
end

%delete('matfilename.mat');
save(matfilename,'model');
return